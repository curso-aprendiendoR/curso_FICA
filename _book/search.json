[{"path":"index.html","id":"introducción","chapter":"Introducción","heading":"Introducción","text":"El objetivo de este curso es introducir todos los participantes al lenguaje de programación R, manejar diferentes variables, así como estructuras de control, finalmente comenzar el camino en el análisis geoestadístico.Este manual ha sido elaborado en R con bookdown.El código del curso se encuentra en GitHub","code":""},{"path":"index.html","id":"metodología","chapter":"Introducción","heading":"Metodología","text":"Actividades prácticas mediante ejercicios que refuercen el aprendizaje del tema. Los estudiantes aprenderán haciendo y utilizando el lenguaje de programación R y el entorno de desarrollo RStudio","code":""},{"path":"index.html","id":"propósito","chapter":"Introducción","heading":"Propósito","text":"El curso se ha planteado de manera que cumpla con dos propósitos fundamentales:Vencer el miedo programar, y recordar siempre que los errores son solo eso, erroresEmpezar trabajr con datos y generar autonomía propia en codificación.","code":""},{"path":"index.html","id":"contenido","chapter":"Introducción","heading":"Contenido","text":"Antes de EmpezarPrimeros Pasos: Tipos de Variables y Lectura de datosFacilitando el problema: Flujo del Programa y Estructuras de ControlGráficosInterpolación Espacial y Mapas con R","code":""},{"path":"instalación.html","id":"instalación","chapter":"Capitulo1 Instalación","heading":"Capitulo1 Instalación","text":"","code":""},{"path":"instalación.html","id":"qué-es-r-y-rstudio","chapter":"Capitulo1 Instalación","heading":"1.1 ¿Qué es R y Rstudio?","text":"R es un software libre especializado en la estadística y el análisis de datos; además es importante tener presente que R es un lenguaje de programación, es decir es nuestro idioma, nuestro español, con el que lograremos comunicarnos con el computador.La estructura de código abierto y la facilidad de compartir es una ventaja que permite tener flexibilidad y personalización, facilitando el desarrollo de paquetes y extensiones que amplían las capacidades de R.Ahora si decimos que R es el idioma que permite la comunicación, y que nuestra comunicación será escrita nos preguntaremos: ¿Cuál es el canal que nos permitirá comunicarnos? De la misma manera que el mismo texto en español puede ser escrito en una carta, un correo, un mensaje de texto, en programación se puede usar diferentes entornos de desarrollo integrado IDE, siendo nuestro IDE RStudio.","code":""},{"path":"instalación.html","id":"cómo-los-instalo","chapter":"Capitulo1 Instalación","heading":"1.2 ¿Cómo los Instalo?","text":"Recuerda que tanto para instalar R, RStudio y algunos paquetes se necesita conexión internet.","code":""},{"path":"instalación.html","id":"empezaremos-instalando-r","chapter":"Capitulo1 Instalación","heading":"1.2.1 Empezaremos instalando R","text":"Para instalar R hay que ingresar en https://cran.r-project.org/ y seleccionar la instalación acorde al sistema operativo que uses.Para instalar R hay que ingresar en https://cran.r-project.org/ y seleccionar la instalación acorde al sistema operativo que uses.Para sistemas operativos Windows, hacer clik en install R first timePara sistemas operativos Windows, hacer clik en install R first timeEn la siguiente pantalla hacer click en Download R Windows. Actualmente la última versión disponible es: R-4.4.1 y solo se encuentra disponible para 64 bit.En la siguiente pantalla hacer click en Download R Windows. Actualmente la última versión disponible es: R-4.4.1 y solo se encuentra disponible para 64 bit.Una vez se haya descargado el instalador, lo ejecutamos haciendo doble click y seguimos los pasos de instalación predeteminados.Una vez se haya descargado el instalador, lo ejecutamos haciendo doble click y seguimos los pasos de instalación predeteminados.","code":""},{"path":"instalación.html","id":"instalación-de-rstudio","chapter":"Capitulo1 Instalación","heading":"1.2.2 Instalación de RStudio","text":"Para instalar RStudio debe ingresar en https://posit.co/download/rstudio-desktop/#download y hacer click en Download RStudio Desktop WindowsPara instalar RStudio debe ingresar en https://posit.co/download/rstudio-desktop/#download y hacer click en Download RStudio Desktop WindowsDespués de descargar el instalador, lo ejecutamos haciendo doble click y seguimos los pasos de instalación predeteminados.Después de descargar el instalador, lo ejecutamos haciendo doble click y seguimos los pasos de instalación predeteminados.Finalmente, tras la instalación tendrás en el escritorio o en su defecto podrás buscar en la barra de tareas RStudio y estamos listos para empezar.Finalmente, tras la instalación tendrás en el escritorio o en su defecto podrás buscar en la barra de tareas RStudio y estamos listos para empezar.Recuerda que aunque vayamos usar la consola de R; RStudio se ejecutará menos que hayas instalado previamente RLes dejo un video recopilado de Youtube, que puede servirles si aún pueden intalar R y Rstudio\n\n\n","code":""},{"path":"instalación.html","id":"intalación-de-paquetes","chapter":"Capitulo1 Instalación","heading":"1.3 Intalación de Paquetes","text":"Cuando Instalamos R y Rstudio, se instalan 7 paquetes básicos con las funciones mínimas para poder operar. Sin embargo, recordemos que R es un software libre, por lo que existen códigos hechos por otros usuarios y validados por el equipo de CRAN, este conjunto de funciones, datos y documentación sobre las funciones se les llama paquetes o librerías y podrán ser instalados según las necesidades.\nActualmente existen 21254 paquetes que incrementan las potencialidades de R.Para ocupar una librería de R debe descargarse mediante install.packages(\"nombre de la librería\"), este proceso se realizará una sola vez. Una vez instalada la librería, debemos decirle R que queremos utilizarla con library(\"nombre de la librería\"). Recuerda que siempre que inicies sesión será necesario acudir la librería nuevamente.","code":""},{"path":"interfaz-de-rstudio.html","id":"interfaz-de-rstudio","chapter":"Capitulo2 Interfaz de RStudio","heading":"Capitulo2 Interfaz de RStudio","text":"Consola:  En la consola podemos ejecutar órdenes y también es la sección en donde se mostrarán los resultados.\nFigure 2.1: Consola de R\nEntorno de variables:  Si observas la imagen anterior, se ha utilizado la consola como una calculadora, sin embargo, implicitamente hemos realizado un proceso muy importante en la programación, la asiganción, que consiste en almacenar un valor en una variable, cuando se asigna una variable se realiza una reserva de memoria.Para realizar una asignación en R se debe tener en cuenta tres elementos:El nombre de la variableEl operador de asignación que puede ser: <- o =El datos asignarPractiquemos, en la consola escribiremos:¿Pero en donde puedo visulaizar las variables que hemos creado?\nEl panel de entorno es en donde se irán guardando los objetos con los que trabajemos.\nFigure 2.2: Entorno de R\nArchivos/Plots/Ayuda:  Este cuadrante se encuentra en la parte inferior derecha de la pantalla y tiene varios paneles, entre ellos tenemos la pestaña Files en donde se muestran los documentos del directorio del proyecto en donde se está trabajando actualmente. En el panel también se tiene las pestañas: Plots en donde se mostrarán los gráficos resultantes, Packages los paquetes instalados, Heplen donde se podrá busrcar la documentación de las funciones.\nFigure 2.3: Panel de Archivos de R\nAdemás si se escribe en la consola ? Nombre de la función se activará el panel de ayuda con la información de la función\nFigure 2.4: Panel de Ayuda\n","code":"\na <- 30\nb = 12\n? read.csv"},{"path":"interfaz-de-rstudio.html","id":"y-en-dónde-programamos","chapter":"Capitulo2 Interfaz de RStudio","heading":"2.1 ¿ Y En dónde Programamos?","text":"Recordemos que cuando hablábamos de RStudio, hacíamos el simil con el canal de comunicación, por lo que la última parte del interfaz que nos falta revisar es justamente en donde vamos progamar. Así que abriremos un Script. Un Script es más que un archivo de texto en el que se escribe las intrucciones para comunicarnos con R.¿Podríamos comunicarnos través de la consola? Si sin embargo cuando cierres RStudio, perderás todo.Vamos abrir nuestro primer Script haciendo click en File<< New File<< R Script Tras abrirlo se desplegará una cuarta ventana en donde empezaremos trabajar. Recuerda que este archivo se puede guardar tecleando Ctrl + s o haciendo click en Save current Documents\nFigure 2.5: Apertura de Script\n\nFigure 2.6: Script\n","code":""},{"path":"variables.html","id":"variables","chapter":"Capitulo3 Variables","heading":"Capitulo3 Variables","text":"¿Con qué tipo de datos podemos trabajar?R es un lenguaje de programación y entorno de desarrollo especializado en análisis estadístico, por lo que todo proceso lo basaremos en torno variables matemáticas, sin embargo recordemos que una variable matemática puede ser un valor numérico o un valor numérico. Por lo que en este capítulo se describirá diferentes tipo de variables que será de utilidad más adelante.","code":""},{"path":"variables.html","id":"variables-numéricas","chapter":"Capitulo3 Variables","heading":"3.1 Variables Numéricas","text":"Las variables numéricas, son aquellas que representan números, sean entero como edad o decimales como la estatura y con ellas se pueden realizar operaciones aritméticas.Con los datos numéricos podemos realizar todas las operaciones matemáticas como: sumar (+), restar (-), multiplicar (*), dividir (/), obtener el resto de la división %%, la raíz cuadrada sqrt(), el valor absoluto abs(), obtener una potencia (^), etc.","code":"\n## Asignando las variables\n\na <- 5\nb <- -2\n\n#Suma - Resta - Multiplicación\n\na + b\n#> [1] 3\na - b\n#> [1] 7\na*b\n#> [1] -10\n\n#División\n\na/b\n#> [1] -2.5\na%/%b\n#> [1] -3\na%%b\n#> [1] -1\n\n#Potencia y raíz\n\na^2\n#> [1] 25\nsqrt(b)\n#> Warning in sqrt(b): NaNs produced\n#> [1] NaN\n\n# NaN es un número que no está definido\n\nsqrt(abs(b))\n#> [1] 1.414214"},{"path":"variables.html","id":"variable-de-tipo-caracter-texto","chapter":"Capitulo3 Variables","heading":"3.2 Variable de tipo caracter (texto)","text":"Dentro de las variables numéricas, se encuentran las variables cualitativas, por ejemplo, el nombre de una persona o su estado civil.Las variables ya están asignadas, y se pueden observar en el panel de entorno, pero observamos ningún resultado. Vamos imprimir el resultado y utilizaremos la función print().Las cadenas de texto son un tipo especial de dato, que puede ser operada aritméticamente ya que son datos numéricos, sin embargo se puede concatenar diferentes variables o varias cadenas de texto.\nUna de las opciones para concatenar es la función paste().Por default esta función agrega espacio por separador, sin embargo se puede configurar agregado ,sep=\"(el separador deseado)\"","code":"\n#Asignemos variables de tipo texto\nnombre = \"Lucía\"\napellido <- \"Álvarez\"\n#Impresión de resultados\n\nprint(nombre)\n#> [1] \"Lucía\"\n# Practiquemos\nedad <- 31\npaste(nombre, apellido,\"tiene\", edad, 'años')\n#> [1] \"Lucía Álvarez tiene 31 años\"\npaste(nombre, apellido,\"tiene\", edad, 'años', sep = \"-\")\n#> [1] \"Lucía-Álvarez-tiene-31-años\""},{"path":"variables.html","id":"variables-lógicas-o-booleanas","chapter":"Capitulo3 Variables","heading":"3.3 Variables Lógicas o Booleanas","text":"la pregunta ¿usted tiene hermanos?, la respuesta será un variable lógica. Si tiene hermanos la respuesta será TRUE y FALSE si tiene hermanos.Si tuvieramos dudas del tipo de variable con la que estamos trabajando podemos recurrir al comando class()","code":"\na < 8\n#> [1] TRUE\nb == 12\n#> [1] FALSE\n\n#Hagamos otro ejemplo\n\n#Vamos a crear una secuencia y después comprobaremos si un número está contenido en la secuencia\n\nc <- 3:10\n6%in%c\n#> [1] TRUE\n\n# A la misma secuencia le preguntaremos si alguno de los elementos es 2\n\nall(c == 2)\n#> [1] FALSE\nclass(a)\n#> [1] \"numeric\"\nclass(nombre)\n#> [1] \"character\""},{"path":"variables.html","id":"fechas","chapter":"Capitulo3 Variables","heading":"3.4 Fechas","text":"Uno de los tipos de datos los que tal vez tengamos que enfrentarnos es las fechas. Si observamos: 16-09-2024 podemos facilmente comprender que estamos hablando de un día, mes y año específico, es decir un instante en el tiempo con el que podríamos operar, podríamos sumar un día o restar un mes y seguir sabiendo que tenemos una fecha en concreto.\nSin embargo para R 16-09-2024 esto es una cadena de texto que tiene el mismo significado que nosotros le hemos dadoEntonces es necesario convertir una cadena de texto en Fecha, que aunque la seguiremos visualizando como un texto R la almacenará como un número, el número de segundos transcurridos desde el 1 de enero de 1970. Para realizar esta transformación solo se requiere del comando .POSIXct() o como lista con el comando .POSIXLT()y ¿qué sucede si tengo mi fecha en otro formato? R te entenderá y tendremos que explicarle cual es el formato que hemos ingresadoUna fecha se puede expresar de muchos formatos, y cada uno se codifica de manera diferente, puedes acceder las ayudas de R para encontrar el formato que requieras ?.POSIXctTanto .POSIXct, como .POSIXlt, se encuentran dentro de los paquetes básicos de R, sin embargo también se cuenta con el paquete lubridate con diferentes funciones para trabajar con fechas.","code":"\nfecha<- \"2024-09-16\"\nclass(fecha)\n#> [1] \"character\"\n\n#Sumemos un día es decir 86400 segundos\nfecha + 86400\n#> Error in fecha + 86400: non-numeric argument to binary operator\nf<- as.POSIXct(\"2024-09-16 10:20\")\nprint(f)\n#> [1] \"2024-09-16 10:20:00 -05\"\nf + 86400\n#> [1] \"2024-09-17 10:20:00 -05\"\n# Ingresaré la fecha en el formato: día/año/año\nas.POSIXct(\"16/09/2024\")\n#> [1] \"0016-09-20 LMT\"\n\n#¿Cómo hago que R me comprenda?\n\nas.POSIXct(\"16/09/2024\", format = \"%d/%m/%Y\")\n#> [1] \"2024-09-16 -05\""},{"path":"variables.html","id":"ejercicio","chapter":"Capitulo3 Variables","heading":"3.5 📝 Ejercicio","text":"El fin de semana salió comer un restaurante en donde la comida le costó $16, para obtener el valor total debe agregarle el impuesto del valor agregado del 15% y 5% de servicios y propina.Almacene en una variable llamada total el valor total cancelado.Imprima la frase: La comida ha costado: Si usted salió de su casa con $25, imprima una cadena de texto que exprese cuánto dinero le sobróCalcula los días y años que han pasado desde la fecha de tu cumpleaños hasta el día de hoy.","code":""},{"path":"vectores.html","id":"vectores","chapter":"Capitulo4 Vectores","heading":"Capitulo4 Vectores","text":"Hasta el momento hemos almacenado únicamete variables individuales. ¿Y si quisiéramos almacenar un conjunto de elementos?Los vectores en R son objetos que tienen una sola dimensión, en donde se puede almacenar diferentes tipos de variables.Para crear un vector en R se utiliza el comando c() y cada elemento que pertenecerá este conjuno se debe separar con ,. Muchas veces será importante conocer la longitud total, tambien llamada dimensión del vector se utiliza el comando length().Es muy importante poder acceder los objetos creados. En este capítulo repasaremos cómo ponder visualizar y modificar los elementos de un vector. Hay que recordar que la posisicón de los elemento de un vector comienzan en 1 y que dentro del corchete se debe colocar la posición del elemento ser encontrado. obteniendo como resultado el valor del objeto que ocupa la posición consultadaSin embargo si yo intento buscar un elemento que está fuera de la longitud del vector, obtendré un NAAccederemos una variable través del nombre de que le asignamos esta y la modificaremosFinalmente obtendremos información partir de variables lógicasSin embargo queremos conocer si la información es verdadera o falsa, queremos conocer el valor asigando la respuesta verdaderaRecuerda que los vectores solo pueden contener variables numéricas, también podemos formar vectores con variables tipo caracter o variables lógicas. Ahora realizamos un ejercicio de práctica","code":"\n# Ceración de un vector con variables numéricas\n\nv <- c(3,5,9) \n\n# Vamos a agregar nombres a las posiciones de los valores\n\nv1 <- c(3,5,9,ancho = 2, largo = 7)\n\n# ¿Cómo puedo imprimir un vector?\n\nprint(v) #Opción 1\n#> [1] 3 5 9\n\n(v1) #Opción 2\n#>                   ancho largo \n#>     3     5     9     2     7\n\n# Determinar la longitud o dimensión del vector\n\nlength(v)\n#> [1] 3\n\nlength(v1)\n#> [1] 5\n# Accederemos al primer elemento del vector llamado v1\n\nv1[1]\n#>   \n#> 3\n\n#También podemos eliminar elementos del vector\n\nv[-2]\n#> [1] 3 9\nv[7]\n#> [1] NA\nv1[\"largo\"]\n#> largo \n#>     7\n\nv1[\"largo\"]= 15\nprint(v1)\n#>                   ancho largo \n#>     3     5     9     2    15\n# Del vector v1 queremos saber los elementos que tiene asignado un valor mayor a 4 \n\nv1 > 4\n#>                   ancho largo \n#> FALSE  TRUE  TRUE FALSE  TRUE\nmayor <- v1 > 4\nv1[mayor]\n#>             largo \n#>     5     9    15"},{"path":"vectores.html","id":"ejercicio-1","chapter":"Capitulo4 Vectores","heading":"4.1 📝 Ejercicio","text":"Cree tres vectores, uno que corresponda los nombres de las películas de Disney más influyentes, en otro asigne puntuaciones y finalmente uno de tipo lógico según el año de estreno de la película, en donde si esta se estrenó posterior al 2007 sea verdadero, caso contrario falso\nFigure 4.1: Películas de Disney\nObtener el valor promedio de puntuaciones de las tres series, puede usar el comando mean()Almacene en un vector el nombre de la película mejor puntuada y la peor puntuadaAlmacene en un vector llamado pelis_viejitas las películas estrenadas antes del 2007, mediante variables lógicasElimine del vector que almacena los nombres de las películas el nombre de la película con menor puntaje.","code":""},{"path":"data-frames.html","id":"data-frames","chapter":"Capitulo5 Data Frames","heading":"Capitulo5 Data Frames","text":"Recordemos que un vector es un objeto en una sola dimensión, es decir hemos formados columnas independientes. En este capítulo formaremos datos estructurados través de data frames.Los data frames son un cojunto de vectores de la misma longitud, sin embargo, necesariamente del mismo tipo, lo que hace que tengan una vetaja sobre las matrices que son otro tipo de dato estructuraro de R que permiten almacenar distintas variables siempre y cuando tengan la misma longitud y el mismo tipo de dato.Esto es bastante limitante ya que en la vida real nuestros datos tendrán variables de todo tipo. Para crear data frames se utliza el comando data.frame() teniendo como argumento los vectores que queremos incluir, siempre separados por comas.Crearemos una tabla de datos de la nómina de estudiantes, este data frame está compuesto por variables de tipo caracter y variable tipo numéricas.Observemos el data frame obtenido, miramos como cada vector ha formado una columna con el encabezado asignado, supongamos que queremos cambiar el encabezado de la columna (esta acción es muy común y bastante útil), utilizaremos el comando colnames().Revisemos cuantas columnas y cuantas filas tenemosDe la misma manera que podemos acceder la información de un vector, podemos hacerlo en un data frame. Recordando los siguiente [fila,colunma]","code":"\n# Crearemos una tabla de datos de la nómina de estudiantes \n\nnomina_estudiantes <- data.frame(nombre= c(\"Ana\",\"Lucía\",\"Romina\", \"Helena\", \"Santiago\", \"Joel\"), \n                                 apellido = c(\"Cárdenas\",\"Yépez\",\"Lema\",\"Torres\",\"Campos\",\"López\" ),\n                                 edad =c(20,19,22,25,24,21))\nprint(nomina_estudiantes)\n#>     nombre apellido edad\n#> 1      Ana Cárdenas   20\n#> 2    Lucía    Yépez   19\n#> 3   Romina     Lema   22\n#> 4   Helena   Torres   25\n#> 5 Santiago   Campos   24\n#> 6     Joel    López   21\ncolnames(nomina_estudiantes) <- c('Nombre','Apellido',\"Edad\")\nnomina_estudiantes\n#>     Nombre Apellido Edad\n#> 1      Ana Cárdenas   20\n#> 2    Lucía    Yépez   19\n#> 3   Romina     Lema   22\n#> 4   Helena   Torres   25\n#> 5 Santiago   Campos   24\n#> 6     Joel    López   21\nncol(nomina_estudiantes)\n#> [1] 3\nnrow(nomina_estudiantes)\n#> [1] 6\n#Accederemos a la información de la primera fila, segunda columna\nnomina_estudiantes[1,2]\n#> [1] \"Cárdenas\"\n\n#Seleccionar más de un elemnto del data frame\nnomina_estudiantes[2,c(2,3)]\n#>   Apellido Edad\n#> 2    Yépez   19\nnomina_estudiantes[2,c(\"Nombre\",\"Apellido\")]\n#>   Nombre Apellido\n#> 2  Lucía    Yépez\nnomina_estudiantes[c(1,3),c(1,3)]\n#>   Nombre Edad\n#> 1    Ana   20\n#> 3 Romina   22\n\n# Información de una columna\nnomina_estudiantes[,3]\n#> [1] 20 19 22 25 24 21\n\n#Podemos acceder a la información de una columan de manera rápida de la siguiente manera\nnomina_estudiantes$Apellido\n#> [1] \"Cárdenas\" \"Yépez\"    \"Lema\"     \"Torres\"   \"Campos\"  \n#> [6] \"López\""},{"path":"data-frames.html","id":"ejercicio-2","chapter":"Capitulo5 Data Frames","heading":"5.1 📝 Ejercicio","text":"Agregar una columna al data frame nomina_estudiantes llamada calificaciones, y regristre las siguientes calificaciones finales: 8.2, 5.4, 8.0, 7.5, 7.0, 6.2.Almacene en un data frame llamado orden_menor_a_mayor el regristro de estudiantes según la edad. Para ordenar utilice el comando order() busque información en la ayudas de R.Del data frame ordenado extraiga y almacene en una variable llamada Aprobados las personas que obtuvieron mayor o igual 7. se olvide que se aprende programar, programando por lo que debe pensar como codificar para que R sea quien identifique y extariga quienes tienen más o igual 7.","code":""},{"path":"lectura-de-datos.html","id":"lectura-de-datos","chapter":"Capitulo6 Lectura de Datos","heading":"Capitulo6 Lectura de Datos","text":"En este capítulo revisaremos una tabla de datos extensa de la cual obtendremos varios resultados con varias herramientas que ya conocemos y algunas nuevasR contiene una librería con datos reales que pueden ser usados, para acceder ella debemos instalar el paquete datasets y escribir el comando datasets::y pulsar el tabulador; esta librería te será muy útil para practicar.En esta clase utilizaremos los datos de la librería de R, sino que cargaremos un documento tipo csv de datos de becarios del SENECYT.Para cargar datos csv en R escribimos el comando read.csv(), en el argumento colocaremos el directorio del archivo, sin embargo si el archivo se encuentra en la misma carpeta del proyecto basta con colocar el nombre del archivo y la extensión del mismo.Ahora si el archivo de datos es de tipo xlsx primero deberás instalar el paquete readxl y ejecutar el comando read_excel()Si queremos observar la tabla de datos podemos acceder través del panel de entorno o con el comando View()Si quisiéramos ver parcialmente la información que tenemos podemos visualizar las 6 primeras filas de datos con el comando head(), también podemos visualizar las 6 últimas filas con el comando tail().El comando summary() es una excelente manera de hacer una inspección inicial de una base de datos, este comando permite obtener un resumen de la información través de un reporte de estadística descriptivaAhora revisemos la dimensión de la tabla de datos dim(). ¿Cuántos registos tengo (número de filas) nrow() y cuantas variables registradas (número de columnas) ncol()? y ¿si quiesiera saber el nombre de las variables colnames()?Ahora modifiquemos nuestro data frame de ejemplo para dejar únicamente las variables más relevantesVamos eliminar todos los datos de la operadora y practicaremos varias maneras de realizarlo.Ahora practicaremos un comando de mucha utilidad () este comando nos permite encontrar índices (es decir el número de orden) correspondientes variables que cumplan con ciertas caracteríticas.Ahora eliminaremos las columnas que en el nombre tengan la palabra OPERADORA. Utilizaremos el comando grepl(), este comando busca comulnas con una caracteritica especifica, en el argumento colocaremos dos items:\n1. El patrón buscar\n2. En donde buscarmenos el patróngrepl nos dará como resultado una veariable lógica indicándonos si cumple o con la condición. Si observas bien el caso en el que borramos la columna TIPO_OPERADORA, te darás cuenta que antes de encontrar el índice encontramos un valor lógico. De manera similar realizaremos este casoRecordemos que cuando observamos el resumen de variables nos indicaba que la fecha es tipo caracter, vamos cambiar tipo fecha, agregaremos una columna de hora que importaremos de un archivo csv y uniremos estas dos variables en una sola columna. Aquí practicaremos como agregar una nueva columna al data frame, uniremos dos datos en una sola columna, transformaremos fecha y eliminaremos las columnas que ya han sido unificadas.Observe que cuando eliminamos las columnas de fecha y hora, la estructura le agregamos ! y si somos observadores también identificaremos que quitamos -; esto se debe que el signo ! es utilizado como negación.¿Cómo ha quedado el data frame hasta el momento?Al observar el resumen del data frame, observamos que el la columna de área tenemos NA, estos casilleros tiene datos. Ahora supongamos que queremos eliminar las filas que tienen datos de área afectada. (Ojo: siempre se deberá borrar las filas que tienen datos, dependerá del análisis que se quiera hacer)Para el manejo de data frame tenemos una herramienta muy potente: la función subset(). Dicha función permitir seleccionar filas y columnas la vez, de la siguiente manera:x: Data frame de entrada.\nsubset: condición lógica que queramos usar para seleccionar las filas.\nselect: un vector que contenga el nombre de las columnas que queremos seleccionar (este argumento es necesario si queremos filtrar filas y columnas).En nuestro ejemplo vamos buscar datos de la provincia y el cantón que tengan área de afectación mayor 5 kilómetros cuadraros y que estas áreas afectadas sean parte del Sistema Nacional de Áreas Protegidas snap.","code":"\n#Carguemos y almacenemos el archivo\nincendio<- read.csv(\"./documentos/maate_incendio.csv\")\nView(incendio)\n# Visualización de las 6 primeras filas de datos\nhead(incendio)\n#>   ANIO_REPORT DPA_PROVIN PROVINCIA DPA_CANTON  CANTON\n#> 1        2022         17 PICHINCHA       1701   QUITO\n#> 2        2022         17 PICHINCHA       1701   QUITO\n#> 3        2022         17 PICHINCHA       1701   QUITO\n#> 4        2022         17 PICHINCHA       1702 CAYAMBE\n#> 5        2022         11      LOJA       1101    LOJA\n#> 6        2022          7    EL ORO        705  CHILLA\n#>   DPA_PARROQ PARROQUIA            EVENTO CAT_EVENTO\n#> 1     170175      PIFO INCENDIO FORESTAL  Antropico\n#> 2     170175      PIFO INCENDIO FORESTAL  Antropico\n#> 3     170175      PIFO INCENDIO FORESTAL  Antropico\n#> 4     170252  CANGAHUA INCENDIO FORESTAL  Antropico\n#> 5     110151  CHANTACO INCENDIO FORESTAL  Antropico\n#> 6      70550    CHILLA INCENDIO FORESTAL Epoca seca\n#>   ALERTA_FECHA MES NIVEL_INF CALIF_EVEN CAT_CRUCE\n#> 1    9/19/2021   9   Nivel 1    Nivel 1       aph\n#> 2    9/10/2021   9   Nivel 1    Nivel 1       aph\n#> 3    9/24/2021   9   Nivel 1    Nivel 1       aph\n#> 4    9/23/2021   9   Nivel 2    Nivel 2       aph\n#> 5    9/14/2021   9   Nivel 3    Nivel 1       bvp\n#> 6    8/27/2021   8   Nivel 3    Nivel 2       bvp\n#>                                NAM AREA_HA\n#> 1                 PONCE PALUGUILLO      10\n#> 2                 PONCE PALUGUILLO     100\n#> 3                 PONCE PALUGUILLO      10\n#> 4                          KAYAMBI      20\n#> 5 CUENCA DEL RIO MALACATOS EN LOJA     140\n#> 6                          CASACAY     140\n\n#Visualización de las últimas 6 filas y columnas 7, 9 y 16\ntail(incendio[,c(7,9,16)])\n#>     PARROQUIA CAT_EVENTO AREA_HA\n#> 58  SAN JOSE   Antropico    1230\n#> 59 SAN MIGUEL  Antropico      10\n#> 60 SAN MIGUEL  Antropico    1500\n#> 61    CAYAMBE  Antropico     100\n#> 62     TUFINO  Antropico     750\n#> 63     TUFINO  Antropico     750\nsummary(incendio)\n#>   ANIO_REPORT     DPA_PROVIN      PROVINCIA        \n#>  Min.   :2022   Min.   : 1.000   Length:63         \n#>  1st Qu.:2022   1st Qu.: 3.000   Class :character  \n#>  Median :2022   Median : 9.000   Mode  :character  \n#>  Mean   :2022   Mean   : 9.651                     \n#>  3rd Qu.:2022   3rd Qu.:17.000                     \n#>  Max.   :2022   Max.   :18.000                     \n#>                                                    \n#>    DPA_CANTON      CANTON            DPA_PARROQ    \n#>  Min.   : 101   Length:63          Min.   : 10154  \n#>  1st Qu.: 302   Class :character   1st Qu.: 30252  \n#>  Median : 901   Mode  :character   Median : 90112  \n#>  Mean   : 967                      Mean   : 96747  \n#>  3rd Qu.:1701                      3rd Qu.:170160  \n#>  Max.   :1808                      Max.   :180856  \n#>                                                    \n#>   PARROQUIA            EVENTO           CAT_EVENTO       \n#>  Length:63          Length:63          Length:63         \n#>  Class :character   Class :character   Class :character  \n#>  Mode  :character   Mode  :character   Mode  :character  \n#>                                                          \n#>                                                          \n#>                                                          \n#>                                                          \n#>  ALERTA_FECHA            MES          NIVEL_INF        \n#>  Length:63          Min.   : 2.000   Length:63         \n#>  Class :character   1st Qu.: 8.000   Class :character  \n#>  Mode  :character   Median : 9.000   Mode  :character  \n#>                     Mean   : 8.683                     \n#>                     3rd Qu.:10.000                     \n#>                     Max.   :12.000                     \n#>                                                        \n#>   CALIF_EVEN         CAT_CRUCE             NAM           \n#>  Length:63          Length:63          Length:63         \n#>  Class :character   Class :character   Class :character  \n#>  Mode  :character   Mode  :character   Mode  :character  \n#>                                                          \n#>                                                          \n#>                                                          \n#>                                                          \n#>     AREA_HA      \n#>  Min.   :  10.0  \n#>  1st Qu.:  10.0  \n#>  Median :  10.0  \n#>  Mean   : 112.7  \n#>  3rd Qu.:  30.0  \n#>  Max.   :1500.0  \n#>  NA's   :4\ndim(incendio)\n#> [1] 63 16\nnrow(incendio)\n#> [1] 63\nncol(incendio)\n#> [1] 16\ncolnames(incendio)\n#>  [1] \"ANIO_REPORT\"  \"DPA_PROVIN\"   \"PROVINCIA\"   \n#>  [4] \"DPA_CANTON\"   \"CANTON\"       \"DPA_PARROQ\"  \n#>  [7] \"PARROQUIA\"    \"EVENTO\"       \"CAT_EVENTO\"  \n#> [10] \"ALERTA_FECHA\" \"MES\"          \"NIVEL_INF\"   \n#> [13] \"CALIF_EVEN\"   \"CAT_CRUCE\"    \"NAM\"         \n#> [16] \"AREA_HA\"\n# Vamos con la más sencilla\nincendio<- incendio[,-11]\nwhich(colnames(incendio)==\"DPA_PROVIN\")\n#> [1] 2\n\n#Ahora vamos a eliminar esta columna\n#Primero almacenaré el índice de la variable a eliminar\nborrar<- which(colnames(incendio)==\"DPA_PROVIN\")\n#Ahora eliminamos la columna DPA_PROVIN\nincendio<- incendio[,-borrar]\n#Vamos paso a paso\n#Primero obtendremos la variable lógica \ngrepl(\"dpa\", colnames(incendio), \n      ignore.case =TRUE)\n#>  [1] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE\n#> [10] FALSE FALSE FALSE FALSE FALSE\n#He colocado un tercer item para indicar que no considere mayúsculas y minúsculas\n\n#Ahora buscaremos el indicador y lo almacenaremos\nborrar_2<- which(grepl(\"dpa\",colnames(incendio), ignore.case = TRUE))\n\n#Finalmente lo eliminaremos\nincendio<- incendio[,-borrar_2]\n\n#Hasta ahora el data frame se ve así\nhead(incendio)\n#>   ANIO_REPORT PROVINCIA  CANTON PARROQUIA            EVENTO\n#> 1        2022 PICHINCHA   QUITO      PIFO INCENDIO FORESTAL\n#> 2        2022 PICHINCHA   QUITO      PIFO INCENDIO FORESTAL\n#> 3        2022 PICHINCHA   QUITO      PIFO INCENDIO FORESTAL\n#> 4        2022 PICHINCHA CAYAMBE  CANGAHUA INCENDIO FORESTAL\n#> 5        2022      LOJA    LOJA  CHANTACO INCENDIO FORESTAL\n#> 6        2022    EL ORO  CHILLA    CHILLA INCENDIO FORESTAL\n#>   CAT_EVENTO ALERTA_FECHA NIVEL_INF CALIF_EVEN CAT_CRUCE\n#> 1  Antropico    9/19/2021   Nivel 1    Nivel 1       aph\n#> 2  Antropico    9/10/2021   Nivel 1    Nivel 1       aph\n#> 3  Antropico    9/24/2021   Nivel 1    Nivel 1       aph\n#> 4  Antropico    9/23/2021   Nivel 2    Nivel 2       aph\n#> 5  Antropico    9/14/2021   Nivel 3    Nivel 1       bvp\n#> 6 Epoca seca    8/27/2021   Nivel 3    Nivel 2       bvp\n#>                                NAM AREA_HA\n#> 1                 PONCE PALUGUILLO      10\n#> 2                 PONCE PALUGUILLO     100\n#> 3                 PONCE PALUGUILLO      10\n#> 4                          KAYAMBI      20\n#> 5 CUENCA DEL RIO MALACATOS EN LOJA     140\n#> 6                          CASACAY     140\n#cargamos un archivo tipo csv en un nuevo data frame\nHora<-read.csv(\"./documentos/hora.csv\", header = FALSE)\n#Unimos dos data frame\nincendio<- cbind(incendio,Hora)\n#Cambiamos el nombre de la columna agregada\ncolnames(incendio)[13]<- \"ALERTA_HORA\"\nincendio$Fecha_Hora<-paste(incendio$ALERTA_FECHA, incendio$ALERTA_HORA)\nincendio$Fecha_Hora<- as.POSIXct(incendio$Fecha_Hora, format= \"%m/%d/%Y %H:%M:%OS\")\n#Borraremos las columnas que ya no necesitamos\nincendio<- incendio[,which(!grepl(\"ALERTA\",colnames(incendio)))]\nhead(incendio)\n#>   ANIO_REPORT PROVINCIA  CANTON PARROQUIA            EVENTO\n#> 1        2022 PICHINCHA   QUITO      PIFO INCENDIO FORESTAL\n#> 2        2022 PICHINCHA   QUITO      PIFO INCENDIO FORESTAL\n#> 3        2022 PICHINCHA   QUITO      PIFO INCENDIO FORESTAL\n#> 4        2022 PICHINCHA CAYAMBE  CANGAHUA INCENDIO FORESTAL\n#> 5        2022      LOJA    LOJA  CHANTACO INCENDIO FORESTAL\n#> 6        2022    EL ORO  CHILLA    CHILLA INCENDIO FORESTAL\n#>   CAT_EVENTO NIVEL_INF CALIF_EVEN CAT_CRUCE\n#> 1  Antropico   Nivel 1    Nivel 1       aph\n#> 2  Antropico   Nivel 1    Nivel 1       aph\n#> 3  Antropico   Nivel 1    Nivel 1       aph\n#> 4  Antropico   Nivel 2    Nivel 2       aph\n#> 5  Antropico   Nivel 3    Nivel 1       bvp\n#> 6 Epoca seca   Nivel 3    Nivel 2       bvp\n#>                                NAM AREA_HA\n#> 1                 PONCE PALUGUILLO      10\n#> 2                 PONCE PALUGUILLO     100\n#> 3                 PONCE PALUGUILLO      10\n#> 4                          KAYAMBI      20\n#> 5 CUENCA DEL RIO MALACATOS EN LOJA     140\n#> 6                          CASACAY     140\n#>            Fecha_Hora\n#> 1 2021-09-19 01:15:12\n#> 2 2021-09-10 16:20:21\n#> 3 2021-09-24 10:28:11\n#> 4 2021-09-23 05:21:08\n#> 5 2021-09-14 17:13:52\n#> 6 2021-08-27 18:33:30\n\nsummary(incendio)\n#>   ANIO_REPORT    PROVINCIA            CANTON         \n#>  Min.   :2022   Length:63          Length:63         \n#>  1st Qu.:2022   Class :character   Class :character  \n#>  Median :2022   Mode  :character   Mode  :character  \n#>  Mean   :2022                                        \n#>  3rd Qu.:2022                                        \n#>  Max.   :2022                                        \n#>                                                      \n#>   PARROQUIA            EVENTO           CAT_EVENTO       \n#>  Length:63          Length:63          Length:63         \n#>  Class :character   Class :character   Class :character  \n#>  Mode  :character   Mode  :character   Mode  :character  \n#>                                                          \n#>                                                          \n#>                                                          \n#>                                                          \n#>   NIVEL_INF          CALIF_EVEN         CAT_CRUCE        \n#>  Length:63          Length:63          Length:63         \n#>  Class :character   Class :character   Class :character  \n#>  Mode  :character   Mode  :character   Mode  :character  \n#>                                                          \n#>                                                          \n#>                                                          \n#>                                                          \n#>      NAM               AREA_HA      \n#>  Length:63          Min.   :  10.0  \n#>  Class :character   1st Qu.:  10.0  \n#>  Mode  :character   Median :  10.0  \n#>                     Mean   : 112.7  \n#>                     3rd Qu.:  30.0  \n#>                     Max.   :1500.0  \n#>                     NA's   :4       \n#>    Fecha_Hora                    \n#>  Min.   :2021-02-13 06:49:19.00  \n#>  1st Qu.:2021-08-05 07:44:18.00  \n#>  Median :2021-09-09 13:35:15.00  \n#>  Mean   :2021-09-05 18:19:12.97  \n#>  3rd Qu.:2021-10-06 14:08:17.50  \n#>  Max.   :2021-12-28 18:28:36.00  \n#> \nincendio<- na.omit(incendio)\n#Primero pasameros de HA a km2\n\nincendio$AREA_KM2 = incendio$AREA_HA * 0.01\n\n#Ahora obtenemos los datos solicitados\n\nsubset(incendio, subset = AREA_KM2 > 5 & CAT_CRUCE == \"snap\", select = c(PROVINCIA, CANTON))\n#>     PROVINCIA              CANTON\n#> 56     GUAYAS           GUAYAQUIL\n#> 58 TUNGURAHUA SANTIAGO DE PILLARO\n#> 60   COTOPAXI             SALCEDO\n#> 62     CARCHI              TULCAN"},{"path":"lectura-de-datos.html","id":"ejercicio-3","chapter":"Capitulo6 Lectura de Datos","heading":"6.1 📝 Ejercicio","text":"Del paquete datasets almacene el conjunto de datos llamado airquality y obtenga los siguientes resultados. (Recuerde utilizar las herramientas que hemos aprendido, tambíen puede buscar otro camino, pero siempre través de codificación)En un data frame llamado calidad_mayo extraiga las 6 variables medidas para el mes de mayo.Elimine del data frame calidad_mayo las filas que contengan NA en cualquiera de las variablesDe la información que le quedó en calidad_mayo alamacene unicamente las filas en donde la velocidad el viento sea mayor 10 y la temperatura menor 70.Calcule cuantas filas quedaron descartadas después de depurar la información de mayo.Traduzque y Cambie los nombres de las columnas del data frame final de calidad_mayoAñada los datos de mayo una columna con la fecha completa (recuerde que todas las observaciones son del año es del año 1973)","code":""},{"path":"funciones-básicas.html","id":"funciones-básicas","chapter":"Capitulo7 Funciones básicas","heading":"Capitulo7 Funciones básicas","text":"","code":""},{"path":"funciones-básicas.html","id":"qué-es-una-función","chapter":"Capitulo7 Funciones básicas","heading":"7.1 ¿Qué es una función?","text":"Una función es un conjunto de instrucciones, de esta forma, es posible escribir un bloque de código y ejecutarlo para distintos datos.\nUna ventaja de utilizar funciones dentro de nuestra codificación es que nos ayuda resolver un problema complejo descomponiendolo en problemas más pequeños.\nAsí, en lugar de utilizar un programa muy grande para resolver un problema complejo se emplean distintos subprogramas que resuelven tareas sencillas.","code":""},{"path":"funciones-básicas.html","id":"como-armo-una-función","chapter":"Capitulo7 Funciones básicas","heading":"7.2 Como armo una función","text":"Para crear una función se usa la palabra function y se debe tener dos componentes muy importantes:\n1. Los parámetros: los parámetros son los “datos” de entrada que empleará la función y lo pongo entre comillas por que estos parámetros aun se les ha asignado datos, son solo nombres que posteriormente ocuparán la información que queramos operar.¿Suena enredoso? Si un poco, pero tranquilos solo son conconceptos que con la práctica se vuelve más sencillo.Los parámetros en una función debe ir entre paréntesis y separados por comas.2.Después viene el código de la función entre {}Y listo empecemos","code":""},{"path":"funciones-básicas.html","id":"creemos-nuestra-primera-función","chapter":"Capitulo7 Funciones básicas","heading":"7.3 Creemos nuestra primera función","text":"Empecemos con una función muy facil y que si bien es cierto es necesaria nos sirve de práctica.Listo hemos creado la función y la hemos almacenado en una variable llamada sumaAhora la ejecutaremosY listo, o casi. Poco poco iremos avanzando en el uso de funciones","code":"\nsuma<- function(a,b) # estas son las variables \n  {\n  #Esto es lo que hace la función\n  c<- a+b\n  return(c) # return no sirve para imprimir\n}\nsuma(5,7)\n#> [1] 12"},{"path":"funciones-básicas.html","id":"ejercicio-4","chapter":"Capitulo7 Funciones básicas","heading":"7.4 📝 Ejercicio","text":"Cree una función que sirva para calcular el área, almacene el resultado en una variable e imprima esta variable. Luego ejecute la función con los valores de largo 4 y ancho 12.","code":""},{"path":"condicional-if---else.html","id":"condicional-if---else","chapter":"Capitulo8 Condicional IF - ELSE","heading":"Capitulo8 Condicional IF - ELSE","text":"La estructura - else es un conjunto de dos parámetros: la condición y la instrucción si la condición se cumple. ESto nos permite tener dos indicaciones una cuando la condición si se cumple y una cuando .Vamos realizar un ejercicio en donde ocuparemos el condicional - ELSE y una función","code":"\noperar<- function(a,b,operacion =\"suma\"){ # Esta llave abre la indicación de la función\n  if(operacion == \"suma\"){ # Verdadero si operación es igual a la palabra suma\n    c<- a+b\n  }\n  else{# Falso si la palabra no corresponde a suma\n    c<- NA\n  }\n  return(c)\n}\noperar(5,7,operacion=\"suma\")\n#> [1] 12\noperar(5,7, operacion = \"resta\")\n#> [1] NA"},{"path":"condicional-if---else.html","id":"if---else-anidados","chapter":"Capitulo8 Condicional IF - ELSE","heading":"8.1 IF - ELSE anidados","text":"La estructura de control - else puede anidarse, es decir puede concatenarse para obtener instrucciones y acciones más complejasHemos agregado al código el comando startWith()que permite determinar una cadena de texto que comience con los caracteres indicados, veamos como funciona este comando y la estructura de control anidada","code":"\noperacion_a_b<-function(a,b,operacion='suma'){\n  if(operacion=='suma'){# Si operacion es igual a suma\n    c<-a+b\n  }else if(operacion=='resta'){ # Si operacion no es igual a suma y es igual a resta\n    c<- a-b\n  }else if(startsWith(operacion,'multi')) { # Si la operación no es igual a resta y si cumple la condición\n    c<-a*b\n  }else{ # Si operacion no cumple la condición\n    c<-NA\n  }\n  c\n}\noperacion_a_b(5,7,operacion='resta')\n#> [1] -2\noperacion_a_b(5,7,operacion='suma')\n#> [1] 12\noperacion_a_b(5,7,operacion='multiplicaremos')\n#> [1] 35\noperacion_a_b(5,7,operacion='xxmultiplicaremos')\n#> [1] NA\noperacion_a_b(5,7,operacion='multiplica')\n#> [1] 35\n#Declaremos las variables previamente - Es decir coloquemos información en las variables\na<-5\nb<-3\npaste('La suma de a + b es:',operacion_a_b(a,b,operacion = \"suma\"))\n#> [1] \"La suma de a + b es: 8\"\npaste('La resta de a - b es:',operacion_a_b(a,b,operacion='resta'))\n#> [1] \"La resta de a - b es: 2\""},{"path":"condicional-if---else.html","id":"ifelse-vectorizado","chapter":"Capitulo8 Condicional IF - ELSE","heading":"8.2 ifelse() Vectorizado","text":"¿Que significa vectorizar una estructura condicional? Cuando vectorizamos podemos construir en una sola fila un número elevado de estructuras de condición, por lo que los argumentos de la función ifelse() seguirán el orden: (condición, que sucede si se cumple, que sucede si se cumple).","code":"\nsuma_resta<-function(a,b,operacion='suma'){\n  ifelse(operacion==\"suma\",a+b,\n         ifelse(operacion=='resta',a-b,NA))\n}\nsuma_resta(5,9,operacion='resta')\n#> [1] -4\nsuma_resta(5,9,operacion='mult')\n#> [1] NA"},{"path":"condicional-if---else.html","id":"ejercicio-5","chapter":"Capitulo8 Condicional IF - ELSE","heading":"8.3 📝 Ejercicio","text":"Con la data empleada en el ejercicio del capítulo Lectura de Datos realice lo siguiente:Guarde en una variable llamada temperatura_alta un indicador lógico TRUE si alguno de los datos es mayor 100 Farenheit, además escriba en la pantalla “Alguno de los registros supera los 100 F”, si fuera el caso, guardar en la variable FALSE e imprimir “Ningún registo supera los 100F”","code":""},{"path":"estructuras-de-control-bucles.html","id":"estructuras-de-control-bucles","chapter":"Capitulo9 Estructuras de Control: Bucles","heading":"Capitulo9 Estructuras de Control: Bucles","text":"Los bucles o ciclos, son herramientas de contro, que permiten repetir un fragmento de código bajo el cumplimiento de una condición, los bucles nos permiten tener eficiencia en tareas reincidentes o iterativas.En el curso revisaremos dos tipos de estructuras de control","code":""},{"path":"estructuras-de-control-bucles.html","id":"for","chapter":"Capitulo9 Estructuras de Control: Bucles","heading":"9.1 For","text":"nos permite repetir un conjunto de órdenes un numero establecido de veces través de un índice irá recorriendo y ejecutanto el código que se encuentre dentro de las llaves.Con un ejemplo simple veamos el funcionamiento de este bucle. Observe que dentro del paréntesis se ha colocado el contador (en el ejemplo lo llamamos ) y la condición del número finito de veces que se repita 1:10, ahora en el corchete hemos colocado la instrucción print()es decir le hemos indicado que imprima el controlador. En el resultado observaremos que el controlador cada que se repetía el bucle incrementaba hasta llegar 10Ahora veamos un ejempo aplicativoDescargaremos de la bolsa el valor de las acciones de algunas empresas y resolveremos la pregunta: ¿ Cual es la empresa con mejor rendimiento?Entendiendo como rendimiento : precio_cierre/precio_apertura¿De quíen es este rendimiento, es de la mejor empresa?el resultado que obtuvimos es el rendimiento de la última empresa que analizó el bucle es decir de NetflixPero cómo hago que devuelva la última si la mejor. Vamos poner un condicional que evalue si el resultado anterior es mejor o peor que el anterior y así determine el mejor de lo mejor.Ahora generemos resultados¿Cuál es la empresa con mejor rendimiento del 2020?¿Cuál es la empresa con mejor rendimiento desde 2021 hasta la actualidad?","code":"\nfor(i in 1:10){\n  print(i)\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9\n#> [1] 10\n# Instalaremos el paquete \"quantmod\"\n# Este paquete permite descargar valores de la bolsa\n#install.packages(\"quantmod\") #Descomentar para instalar\nlibrary(quantmod)\n# Obtengamos los valores para TSLA\nstart <- as.Date('2020-01-01') #Fecha de incio\n# getSymbols es una función del paquete quantmod que permite descargar y guardar\nTSLA <- getSymbols('TSLA',src='yahoo',from=start, auto.assign = F) \nhead(TSLA)\n#>            TSLA.Open TSLA.High TSLA.Low TSLA.Close\n#> 2020-01-02  28.30000  28.71333 28.11400   28.68400\n#> 2020-01-03  29.36667  30.26667 29.12800   29.53400\n#> 2020-01-06  29.36467  30.10400 29.33333   30.10267\n#> 2020-01-07  30.76000  31.44200 30.22400   31.27067\n#> 2020-01-08  31.58000  33.23267 31.21533   32.80933\n#> 2020-01-09  33.14000  33.25333 31.52467   32.08933\n#>            TSLA.Volume TSLA.Adjusted\n#> 2020-01-02   142981500      28.68400\n#> 2020-01-03   266677500      29.53400\n#> 2020-01-06   151995000      30.10267\n#> 2020-01-07   268231500      31.27067\n#> 2020-01-08   467164500      32.80933\n#> 2020-01-09   426606000      32.08933\nanalizadas<- c('AMZN','AAPL','GOOG', 'TSLA', 'NFLX')\nfor(empresa in analizadas){ \n    data_empresas<-getSymbols(empresa,src='yahoo',from=start, to=Sys.Date(), auto.assign = F)\n    df_empresas<- as.data.frame(data_empresas)\n    precio_apertura<- df_empresas[1,1]\n    precio_actual<- df_empresas[nrow(df_empresas),6]\n    rendimiento<- precio_actual/precio_apertura}\nrendimiento\n#> [1] 2.137565\nanalizadas<- c('AMZN','AAPL','NFLX','GOOG', 'TSLA')\n\ncalcula_rendimiento<- function(empresas,fecha_inicio,fecha_fin=Sys.Date()){\n  mejor_rendimiento<- -Inf\n  mejor_empresa<- NA\n  \n  for(empresa in analizadas){ \n    data_empresas<-getSymbols(empresa,src='yahoo',from=fecha_inicio, to=fecha_fin, auto.assign = F)\n    df_empresas<- as.data.frame(data_empresas)\n    precio_apertura<- df_empresas[1,1]\n    precio_actual<- df_empresas[nrow(df_empresas),6]\n    rendimiento<- precio_actual/precio_apertura\n    if(rendimiento>mejor_rendimiento){\n      mejor_rendimiento<- rendimiento\n      mejor_empresa<- empresa\n    }}\n  list(empresa=mejor_empresa,rendimiento =round((mejor_rendimiento)*100),2)\n}\nresul<- calcula_rendimiento(analizadas,fecha_inicio='2020-01-01',fecha_fin= '2020-12-31')\npaste('La empresa con mejor rendimiento fue:'\n      ,resul[['empresa']], 'y su rendimiento fue de'\n      , resul[['rendimiento']],'%')\n#> [1] \"La empresa con mejor rendimiento fue: TSLA y su rendimiento fue de 818 %\"\nresul_2<- calcula_rendimiento(analizadas,fecha_inicio='2021-01-01')\npaste('La empresa con mejor rendimiento fue:'\n      ,resul_2[['empresa']], 'y su rendimiento fue de'\n      , resul_2[['rendimiento']],'%')\n#> [1] \"La empresa con mejor rendimiento fue: GOOG y su rendimiento fue de 180 %\""},{"path":"estructuras-de-control-bucles.html","id":"while","chapter":"Capitulo9 Estructuras de Control: Bucles","heading":"9.2 While","text":"Este es un tipo de bucle que ocurre mientras una condición es verdadera TRUEHagamos un ejercicio mientras aprendemos varias cosas extraRespondamos las pregunta: ¿ Cúantas iteraciones debemos hacer hasta obtener un número menor 5?\nDentro de R podemos trabajar con varias distribuciones, con la función r acompañada del nombre de la distribución podemos generar valores aleatorios, el primer argumento de la función runif() es cuantos números queremos generar, el segundo es el valor mínimo del número aleatorio, y el tercer argumento, el valor máximo.Ahora que ya hemos entendido el funcionamiento del bucle hagamos un ejemplo:Determine el factor de fricción, mediante la ecuación de Colebrook White, para una tubería de PVC de 250 mm por el que transita un caudal de 55 l/sLes colocaré todas las ecuaciones necesarias\nFigure 9.1: Ecuación de Colebrook White\n\nFigure 9.2: Número de Reynolds\n\nFigure 9.3: Ecuación de la Continuidad\n","code":"\nval<- 1 # Observe que estamos declarando una variable previamente al incio del bucle \nwhile(val<5){\n  val<-runif(1,min = 0,max = 10)  \n  print(val)\n}\n#> [1] 2.823265\n#> [1] 7.732907\n# Datos\n\nQ<- 0.055 # Caudal\nD<- 0.25 # Diámetro\ne<- 0.0000015 # Rugosidad absoluta\nvis<- 1.007*(10^-6) # Viscosidad\nA<- (pi*(D^2))/4 # Área\nRe<- ((Q/A)*D)/vis #Número de Reynolds\n\n#Controladores\nf<- 1\nf_anterior<- 0.02\nf_nuevo<- 0.01\n\nwhile(f != f_nuevo){ \n  f_nuevo<- (1/(-2*log10(((e/D)/3.71)+(2.5/(Re*sqrt(f_anterior))))))^2\n  if(f_nuevo == f_anterior){ f<- f_nuevo} else{ \n    f_anterior<- f_nuevo\n    }\n}\nf\n#> [1] 0.01472123"},{"path":"estructuras-de-control-bucles.html","id":"ejercicio-6","chapter":"Capitulo9 Estructuras de Control: Bucles","heading":"9.3 📝 Ejercicio","text":"Para un canal abierto rectangular de PVC (e = 0.0015x10-3). La profundidad del flujo uniforme es 0.5 m con un ancho de 10 m y pendiente de 0.000035. Calcular el caudal que transitaEn la carpeta documentos puede encontrar el ejercicio resuelto para que le sirva como guía de programación.","code":""},{"path":"funciones-de-la-familia-apply.html","id":"funciones-de-la-familia-apply","chapter":"Capitulo10 Funciones de la familia Apply","heading":"Capitulo10 Funciones de la familia Apply","text":"La familia apply en un conjunto de funciones que nos permite ejecutar operaciones o bucles de manera más eficiente dentro de data.frames, matrices, listas o vectores. Estas funciones recorren cada elemento de una fila o una columna, según le hayamos indicado, y ejecuta la función requerida, devolviendo listas o vectores según la función apply aplicada.","code":""},{"path":"funciones-de-la-familia-apply.html","id":"lapply","chapter":"Capitulo10 Funciones de la familia Apply","heading":"10.1 lapply","text":"La función lapply() recorre una lista o un vector X y devuelve una lista con el resultado de F(x) para cada elemento.Observa los resultados obtenidos, esta presentación la hemos visto antes, los resultados de lapply se organizaron en una lista, una lista es otro tipo de organización de datos.","code":"\nv<- c(1,2,3,4,5)\npotencia<- lapply(v,function(x) x^2)\npotencia\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 4\n#> \n#> [[3]]\n#> [1] 9\n#> \n#> [[4]]\n#> [1] 16\n#> \n#> [[5]]\n#> [1] 25"},{"path":"funciones-de-la-familia-apply.html","id":"sapply","chapter":"Capitulo10 Funciones de la familia Apply","heading":"10.2 sapply","text":"La función sapply() recorre una lista o un vector X y devuelve un vector con el resultado de F(x) para cada elemento.","code":"\nv<- c(1,2,3,4,5)\npotencia<- sapply(v,function(x) x^2)\npotencia\n#> [1]  1  4  9 16 25"},{"path":"funciones-de-la-familia-apply.html","id":"practiquemos","chapter":"Capitulo10 Funciones de la familia Apply","heading":"10.3 Practiquemos","text":"Haremos lo mismo con sapply. La F(x) emplear será la misma que codificamos en la sección de lapply, por lo que solo tendremos que emplear la función sapply¿ Te diste cuenta que fue lo que omitimos al emplear las funciones apply?","code":"\n#Funcion lapply\nlibrary(quantmod) \nAANG<- c('AMZN','AAPL','NFLX','GOOG')\n\ncalcula_rendimiento<- function(empresas,fecha_inicio,fecha_fin=Sys.Date()){\n    xts_empresas <- getSymbols(empresas,src='yahoo',from=fecha_inicio, to=fecha_fin, auto.assign = F)\n    df_empresas<- as.data.frame(xts_empresas)\n    precio_apertura<- df_empresas[1,1]\n    precio_actual<- df_empresas[nrow(df_empresas),6]\n    rendimiento<- (precio_actual/precio_apertura)*100\n    rendimiento\n  } \n \nl_rendimiento= lapply(AANG,calcula_rendimiento,'2020-01-01','2020-12-31')\nl_rendimiento\n#> [[1]]\n#> [1] 175.2453\n#> \n#> [[2]]\n#> [1] 176.7522\n#> \n#> [[3]]\n#> [1] 160.8678\n#> \n#> [[4]]\n#> [1] 129.3473\n\n# Elijamos el mejor\n# unlist, convierte la lista en vector\n# recuerdas ¿qué hacía which?\nAANG[which.max(unlist(l_rendimiento))] \n#> [1] \"AAPL\"\nv_rendimiento=sapply(AANG,calcula_rendimiento,'2020-01-01','2020-12-31')\nv_rendimiento\n#>     AMZN     AAPL     NFLX     GOOG \n#> 175.2453 176.7521 160.8678 129.3473\n\nnames(v_rendimiento[which.max(v_rendimiento)])\n#> [1] \"AAPL\""},{"path":"funciones-de-la-familia-apply.html","id":"apply","chapter":"Capitulo10 Funciones de la familia Apply","heading":"10.4 apply","text":"La función aplly recorre un array, matriz o data frame y devuelve un vector para cada elemento con el resultado de F(x) lo largo de la coordenada indicada. En el argumento debemos colocar tres requerimeintos:La matriz, array o data frame analizarel sentido de la operación (MARGIN = 1 hará la opearción por filas, MARGIN = 2 hará la opearción por columnas)La función ejecutarPara el ejemplo de aplicación calcularemos el índice de masa corporal de algunos Superhéroes","code":"\n# Armemos el Data Frame\ndf_superheroes<- data.frame(Nombre= c(\"Batman\",\"Superman\",\"Wonder Woman\",\n                                      \"Iron Man\", \"Capitana Marvel\", \"Capitán América\"),\n                            Peso= c(95,107,75,102,56.25,108), \n                            Estatura=c(1.87,1.90,1.83,1.85,1.80,1.87), \n                            Editorial= c(\"DC\",\"DC\",\"DC\",\"Marvel\",\"Marvel\",\"Marvel\"))\n\n#Calcular IMC\n\ncalcula_metros<- function(row){\n  altura<- as.numeric(row['Estatura'])\n  peso<- as.numeric(row['Peso'])\n  imc<-round(peso/altura^2,1)\n  val<- ifelse(imc<18.5,'Bajo Peso',\n               ifelse(imc<25,'Normal',\n                      ifelse(imc<30,'Sobrepeso','Obesidad')))\n  return(c(imc=imc,observaciones=val))\n}\n(imc<- apply(df_superheroes,1,calcula_metros))\n#>               [,1]        [,2]        [,3]     [,4]       \n#> imc           \"27.2\"      \"29.6\"      \"22.4\"   \"29.8\"     \n#> observaciones \"Sobrepeso\" \"Sobrepeso\" \"Normal\" \"Sobrepeso\"\n#>               [,5]        [,6]      \n#> imc           \"17.4\"      \"30.9\"    \n#> observaciones \"Bajo Peso\" \"Obesidad\"\n(df_superheroes_imc<- cbind(df_superheroes,t(imc)))\n#>            Nombre   Peso Estatura Editorial  imc\n#> 1          Batman  95.00     1.87        DC 27.2\n#> 2        Superman 107.00     1.90        DC 29.6\n#> 3    Wonder Woman  75.00     1.83        DC 22.4\n#> 4        Iron Man 102.00     1.85    Marvel 29.8\n#> 5 Capitana Marvel  56.25     1.80    Marvel 17.4\n#> 6 Capitán América 108.00     1.87    Marvel 30.9\n#>   observaciones\n#> 1     Sobrepeso\n#> 2     Sobrepeso\n#> 3        Normal\n#> 4     Sobrepeso\n#> 5     Bajo Peso\n#> 6      Obesidad\n\n# Calcular el peso medio por editorial\n# split divide el data frame en función de grupos\nl_superheores<- split(df_superheroes_imc,df_superheroes_imc$Editorial)\nmean(l_superheores[['DC']]$Peso)\n#> [1] 92.33333\nmean(l_superheores[['Marvel']]$Peso)\n#> [1] 88.75"},{"path":"gráficos-con-ggplot-2.html","id":"gráficos-con-ggplot-2","chapter":"Capitulo11 Gráficos con ggplot 2","heading":"Capitulo11 Gráficos con ggplot 2","text":"El diseño de gráficos es un capítulo muy extenso que requiere mucha práctica, sin embargo es complejo de comprender. Utilizaremos el paquete ggplot2 para construir gráficos.ggplot2 es un sistema para crear gráficos de forma declarativa es decir grafica través de instruccionesPara el ejemplo utilizaremos la data generada por los organizadores del Octoberfest con respecto al consumo y precios lo largo de los años de la cerveza y el pollo vendido en el festival.Figémonos en la estructura principal del gráfico:El primer atributo corresponde al data frame de donde se obtendrá la informaciónEl segundo atributo es aes() que permite seleccionar las variables graficar y como presentarlas (qué eje corresponden)Con los atributos listos ya podemos empezar agregar capas para formar un gráfico cada vez más complejo.En el ejemplo relacionaremos el año con el precio de la cerveza e incluiremos dos tipos de gráfico, uno de puntos y uno lineal, para crear un gráfico de puntos hemos colocado geom_point y además hemos agregado un color con un código hexagesima, para el gráfico de línea agregamos geom_line y el color en palabras.Al código anteiror le incluiremos títulos los ejes, título al gráfico y un tema. Los títulos de los ejes los agregamos con xlab()o ylab() y el título del gráfico con ggtitle(). Finalmente el tema aplicado será theme_bw() que quita el fondo gris por defecto del gráfico.Ahora grafiquemos en el mismo gráfico el precio del pollo y el precio de la cerveza lo largo de los añosObserve que ahora en el aes solo tenemos asignado x = año ya que es la variable en común, y en cada uno de los gráficos declaramos el eje “y”, además estamos indicando que asigne un color la cervez y un color al pollo.Para nuestro siguiente gráfico vamos instalar el paquete reshape2 y ocuparemos la función melt() que permite reorganizar y resumir.El primer argumento corresponde al data frame de donde se obtendrá la informaciónid.vars() corresponde la variable de identificaciónmeasure.vars() son las variables de organizaciónGrafiquemos un diagrama de barras que represente tanto el precio de la cerveza como el del pollo. En aes (contenido estético) hemos colocado el año como variable independiente y el precio como varible dependiente. Mire que para graficar columnas tenemos geom_col() y en position = ‘dodge’ es decir que las columnas se graficarán sin espacio entre síFinalmente haremos un grafico de correlaciónPrimero con la función cor() generaremos correlaciones entre las variables del data frameAhora organizaremos la data en dos variables que combinen las variables entre ellas. Observa estamos utilizando la función melt()Generemos el gráfico correlacional. Las variables serán la columna Var1 y la columna Var2 del data frame organizado, recuerda que en las dos columnas hay los mismo parámetro; además hemos colocado un color de relleno fill() que dependerá del valor de la correlación.\nEn este gráfico hemos configurado la escala con la función scale_fill_gradient2() en donde definimos el color que representa una correlación alta, media y baja, además de los límites correlacionales.","code":"\n# Descargaremos la data del portal de datos abiertos de Múchin\nurl_oktoberfest<- \"https://opendata.muenchen.de/dataset/8d6c8251-7956-4f92-8c96-f79106aab828/resource/e0f664cf-6dd9-4743-bd2b-81a8b18bd1d2/download/oktoberfestgesamt19852022.csv\"\ndf_oktoberfest<- read.csv(url_oktoberfest)\ncolnames(df_oktoberfest)<-c('año','duración','visitantes_totales',\n                            'visitantes_tag','precio_cerveza',\n                            'consumo_cerveza',\n                            'precio_pollo','consumo_pollo')\nsummary(df_oktoberfest)\n#>       año          duración     visitantes_totales\n#>  Min.   :1985   Min.   :16.00   Min.   :5.500     \n#>  1st Qu.:1994   1st Qu.:16.00   1st Qu.:6.000     \n#>  Median :2003   Median :16.00   Median :6.400     \n#>  Mean   :2003   Mean   :16.35   Mean   :6.322     \n#>  3rd Qu.:2012   3rd Qu.:16.00   3rd Qu.:6.500     \n#>  Max.   :2023   Max.   :18.00   Max.   :7.200     \n#>  visitantes_tag  precio_cerveza  consumo_cerveza\n#>  Min.   :329.0   Min.   : 3.20   Min.   :48698  \n#>  1st Qu.:369.0   1st Qu.: 4.89   1st Qu.:53807  \n#>  Median :394.0   Median : 6.75   Median :61772  \n#>  Mean   :387.1   Mean   : 7.25   Mean   :62799  \n#>  3rd Qu.:406.0   3rd Qu.: 9.41   3rd Qu.:71340  \n#>  Max.   :444.0   Max.   :14.33   Max.   :79225  \n#>   precio_pollo    consumo_pollo   \n#>  Min.   : 3.920   Min.   :313636  \n#>  1st Qu.: 5.340   1st Qu.:479610  \n#>  Median : 8.140   Median :509420  \n#>  Mean   : 7.988   Mean   :560189  \n#>  3rd Qu.:10.070   3rd Qu.:681242  \n#>  Max.   :15.890   Max.   :807710\n# Instalaremos y llamaremos a la librería ggplot2\n# install.packages(\"ggplot2\") #Descomentar para instalar\nlibrary(ggplot2)\nggplot(df_oktoberfest,aes(x=año,y=precio_cerveza))+geom_line(color='green')+\n  geom_point(color='#c263f9')\nggplot(df_oktoberfest,aes(x=año,y=precio_cerveza))+geom_line(color='green')+\n  geom_point(color='#c263f9')+\n  xlab(\"Año\") + ylab(\"Precio Euros\") + ggtitle(\"Precio de la Cerveza en el Octoberfest\")+\n  theme_bw()\nggplot(df_oktoberfest,aes(x=año))+\n         geom_line(aes(y=precio_cerveza,color='cerveza'))+\n         geom_line(aes(y=precio_pollo,color='pollo'))+\n         xlab(\"Año\") + ylab('Precio E') + ggtitle('Precio de la Cerveza y el Pollo en el Oktoberfest')+\n  theme_bw()\n# Instalaremos y llamaremos a la librería ggplot2\n# install.packages(\"reshape2\") #Descomentar para instalar\nlibrary(reshape2)\ndf_melted<- melt(df_oktoberfest,id.vars=('año'),\n                 measure.vars=c('precio_pollo','precio_cerveza'),\n                 variable.name='tipo',value.name = 'precio')\nhead(df_melted)\n#>    año         tipo precio\n#> 1 1985 precio_pollo   4.77\n#> 2 1986 precio_pollo   3.92\n#> 3 1987 precio_pollo   3.98\n#> 4 1988 precio_pollo   4.19\n#> 5 1989 precio_pollo   4.22\n#> 6 1990 precio_pollo   4.47\ntail(df_melted)\n#>     año           tipo precio\n#> 69 2016 precio_cerveza  10.57\n#> 70 2017 precio_cerveza  10.87\n#> 71 2018 precio_cerveza  11.30\n#> 72 2019 precio_cerveza  11.71\n#> 73 2022 precio_cerveza  13.45\n#> 74 2023 precio_cerveza  14.33\nggplot(df_melted,aes(x=año, y=precio, color=tipo))+\n  geom_col(position = 'dodge',aes(fill=tipo))+\n  ylab(\"Precio E\") + xlab(\"Año\") + ggtitle(\"Precio cerveza y pollo en Oktoberfest\")\ncr_oktoberfest<- cor(df_oktoberfest)\ncr_oktoberfest\n#>                           año   duración visitantes_totales\n#> año                 1.0000000  0.4315849       -0.224676225\n#> duración            0.4315849  1.0000000        0.207551671\n#> visitantes_totales -0.2246762  0.2075517        1.000000000\n#> visitantes_tag     -0.4644614 -0.3798716        0.825457655\n#> precio_cerveza      0.9873733  0.4514158       -0.172881811\n#> consumo_cerveza     0.8918055  0.4178338        0.003398335\n#> precio_pollo        0.9720990  0.4861828       -0.167548583\n#> consumo_pollo      -0.8497377 -0.3206961        0.369291773\n#>                    visitantes_tag precio_cerveza\n#> año                    -0.4644614      0.9873733\n#> duración               -0.3798716      0.4514158\n#> visitantes_totales      0.8254577     -0.1728818\n#> visitantes_tag          1.0000000     -0.4275875\n#> precio_cerveza         -0.4275875      1.0000000\n#> consumo_cerveza        -0.2391642      0.8732945\n#> precio_pollo           -0.4438951      0.9870883\n#> consumo_pollo           0.5353060     -0.8306472\n#>                    consumo_cerveza precio_pollo\n#> año                    0.891805498    0.9720990\n#> duración               0.417833780    0.4861828\n#> visitantes_totales     0.003398335   -0.1675486\n#> visitantes_tag        -0.239164239   -0.4438951\n#> precio_cerveza         0.873294471    0.9870883\n#> consumo_cerveza        1.000000000    0.8617829\n#> precio_pollo           0.861782943    1.0000000\n#> consumo_pollo         -0.645371093   -0.8529126\n#>                    consumo_pollo\n#> año                   -0.8497377\n#> duración              -0.3206961\n#> visitantes_totales     0.3692918\n#> visitantes_tag         0.5353060\n#> precio_cerveza        -0.8306472\n#> consumo_cerveza       -0.6453711\n#> precio_pollo          -0.8529126\n#> consumo_pollo          1.0000000\nlibrary(reshape2)\nmlt_cor_oktober<- melt(cr_oktoberfest)\ntail(mlt_cor_oktober)\n#>                  Var1          Var2      value\n#> 59 visitantes_totales consumo_pollo  0.3692918\n#> 60     visitantes_tag consumo_pollo  0.5353060\n#> 61     precio_cerveza consumo_pollo -0.8306472\n#> 62    consumo_cerveza consumo_pollo -0.6453711\n#> 63       precio_pollo consumo_pollo -0.8529126\n#> 64      consumo_pollo consumo_pollo  1.0000000\nggplot(data=mlt_cor_oktober,aes(x= Var1, y =Var2, fill= value))+\n  scale_fill_gradient2(low = 'blue',high ='red',mid = 'white',midpoint = 0,limit=c(-1,1),\n                       name= \"Correlación\")+ \n  geom_tile()+\n  guides(x = guide_axis(angle = 90))"}]
